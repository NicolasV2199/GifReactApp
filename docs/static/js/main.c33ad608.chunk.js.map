{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yOAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAG1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,OAMd,2BACAO,KAAK,OACLC,MAAOT,EACPU,SAnBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,8BCblBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAIKI,MAAOF,GAJZ,cAIbG,EAJa,gBAKEA,EAAUC,OALZ,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXtB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAExC,OACI,yBAAKc,UAAU,8CACX,yBAAKC,IAAOf,EAAMgB,IAAON,IACzB,+BAAMA,EAAN,OCAGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,ECLwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAyBA,OApBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,YAAW,WAEPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAIZ,CAAEpB,IAIEqB,EDtB2BM,CAAc3B,GAAlCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAStB,OACI,oCACI,wBAAIJ,UAAU,yCAAd,IAAwDhB,EAAxD,KAECoB,GAAW,uBAAGJ,UAAU,kDAAb,cAEZ,yBAAKA,UAAU,aAEPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIkB,IAAKlB,EAAIC,IACLD,UEUjBmB,EAnCM,WAGjB,MAAoC3C,mBAAS,CAAC,WAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAOA,OACI,oCACI,4CACA,6BAEA,kBAAC,EAAD,CAAaA,cAAkBA,IAE/B,4BAEQ6C,EAAWrB,KAAI,SAAAf,GAAG,OACd,kBAAC,EAAD,CACAkC,IAAKlC,EACLM,SAAWN,U,MCrBnCqC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.c33ad608.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n//Recibo por parametros la funcion de set categories para agregar nuevas\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    //Uso el hook useState para poder cambiar el valor del input\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    //Me encargo de que cuando haya un cambio en el input, se muestre el nuevo valor\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    /* //Cuando se presione la tecla Enter prevengo que se refresque la pagina, y hago la validacion de que si lo que se inserta es una categoria, entonces llamo a la funcion setCategories que me retorna las categorias que ya tenia, mas el valor insertado en el input, y reinicio el input a vacio*/\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cat => [ inputValue, ...cat,] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n            type=\"text\" \r\n            value={inputValue} \r\n            onChange={handleInputChange} \r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=NwfU8s4HHoK3Jg76DvhsT97T6rg5X0YI`;\r\n\r\n    const respuesta = await fetch( url ); \r\n    const {data} = await respuesta.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n  return (\r\n      <div className='card animate__animated animate__backInLeft'>\r\n          <img src= { url } alt= { title } />\r\n          <p> { title } </p>  \r\n      </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    \r\n    const { data: images, loading } = useFetchGifs( category );\r\n   \r\n\r\n\r\n    //Se utiliza para que la funcion getgifs solo se llame cuando se renderiza el componente por primera vez\r\n    /* Tiene un parametro que es un arreglo de dependencias, en este caso, vacio */\r\n    //Se agrega la categoria en el arreglo de dependencias por si acaso llegase a cambiar.\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2 className='animate__animated animate__fadeInDown'> {category} </h2>\r\n\r\n            {loading && <p className='animate__animated animate__flash animate__slow'>Loading...</p>}\r\n\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\nimport { useEffect } from \"react/cjs/react.development\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setTimeout(() => {\r\n                    \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n                }, 2000);\r\n\r\n            })\r\n\r\n    }, [ category ])\r\n\r\n    \r\n\r\n    return state; \r\n\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState(['Naruto']);\r\n\r\n  /*   const handleAdd = () =>{\r\n        //Recibo el estado anterior, y retorno una copia del anterior, mas el nuevo\r\n        setCategories( cat => [...cat, 'Boruto'] );\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr />\r\n\r\n            <AddCategory setCategories = { setCategories } />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(cat => (\r\n                        <GifGrid \r\n                        key={cat}\r\n                        category={ cat }\r\n\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}